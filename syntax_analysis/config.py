rules = {
  "PROGRAMbegin": "PROGRAM=begin STATEMENT_LIST end",
  "STATEMENT_LISTread": "STATEMENT_LIST=STATEMENT STATEMENTS",
  "STATEMENT_LISTwrite": "STATEMENT_LIST=STATEMENT STATEMENTS",
  "STATEMENT_LISTif": "STATEMENT_LIST=STATEMENT STATEMENTS",
  "STATEMENT_LISTident": "STATEMENT_LIST=STATEMENT STATEMENTS",
  "STATEMENTSend": "STATEMENT=e",
  "STATEMENTSread": "STATEMENTS=STATEMENT STATEMENTS",
  "STATEMENTSwrite": "STATEMENTS=STATEMENT STATEMENTS",
  "STATEMENTSif": "STATEMENTS=STATEMENT STATEMENTS",
  "STATEMENTSident": "STATEMENTS=STATEMENT STATEMENTS",
  "STATEMENTread": "STATEMENT=read openparen ID_LIST closeparen semicolon",
  "STATEMENTwrite": "STATEMENT=write openparen EXPR_LIST closeparen semicolon",
  "STATEMENTif": "STATEMENT=if BEXPR then STATEMENT ELSESTATEMENT semicolon",
  "STATEMENTident": "STATEMENT=ident assignment EXPRESSION semicolon",
  "ELSESTATEMENTelse": "ELSESTATEMENT=else STATEMENT",
  "ELSESTATEMENTsemicolon": "ELSESTATEMENT=e",
  "ID_LISTident": "ID_LIST=ident IDENTS",
  "IDENTScomma": "IDENTS=comma ident IDENTS",
  "IDENTScloseparen": "IDENTS=e",
  "EXPR_LISTplus": "EXPR_LIST=EXPRESSION EXPRESSIONS",
  "EXPR_LISTminus": "EXPR_LIST=EXPRESSION EXPRESSIONS",
  "EXPR_LISTnum": "EXPR_LIST=EXPRESSION EXPRESSIONS",
  "EXPR_LISTopenparen": "EXPR_LIST=EXPRESSION EXPRESSIONS",
  "EXPR_LISTident": "EXPR_LIST=EXPRESSION EXPRESSIONS",
  "EXPRESSIONScomma": "EXPRESSIONS=comma EXPRESSION EXPRESSIONS",
  "EXPRESSIONScloseparen": "EXPRESSIONS=e",
  "EXPRESSIONplus": "EXPRESSION=FACTOR EXPRESSIONOPS",
  "EXPRESSIONminus": "EXPRESSION=FACTOR EXPRESSIONOPS",
  "EXPRESSIONnum": "EXPRESSION=FACTOR EXPRESSIONOPS",
  "EXPRESSIONopenparen": "EXPRESSION=FACTOR EXPRESSIONOPS",
  "EXPRESSIONident": "EXPRESSION=FACTOR EXPRESSIONOPS",
  "EXPRESSIONOPSplus": "EXPRESSIONOPS=OP FACTOR EXPRESSIONOPS",
  "EXPRESSIONOPSminus": "EXPRESSIONOPS=OP FACTOR EXPRESSIONOPS",
  "EXPRESSIONOPScomma": "EXPRESSIONOPS=e",
  "EXPRESSIONOPScloseparen": "EXPRESSIONOPS=e",
  "EXPRESSIONOPSsemicolon": "EXPRESSIONOPS=e",
  "FACTORopenparen": "FACTOR=openparen EXPRESSION closeparen",
  "FACTORident": "FACTOR=ident",
  "FACTORnum": "FACTOR=NUMBER",
  "FACTORplus": "FACTOR=NUMBER",
  "FACTORminus": "FACTOR=NUMBER",
  "OPplus": "OP=plus",
  "OPminus": "OP=minus",
  "BEXPRopenparen": "BEXPR=BTERM BEXPRS",
  "BEXPRtrue": "BEXPR=BTERM BEXPRS",
  "BEXPRfalse": "BEXPR=BTERM BEXPRS",
  "BEXPRnot": "BEXPR=BTERM BEXPRS",
  "BEXPRScloseparen": "BEXPR=e",
  "BEXPRSor": "BEXPRS=or BTERM BEXPRS",
  "BEXPRSthen": "BEXPRS=e",
  "BTERMopenparen": "BTERM=BFACTOR BTERMS",
  "BTERMnot": "BTERM=BFACTOR BTERMS",
  "BTERMtrue": "BTERM=BFACTOR BTERMS",
  "BTERMfalse": "BTERM=BFACTOR BTERMS",
  "BTERMScloseparen": "BTERMS=e",
  "BTERMSand": "BTERMS=and BTERM BTERMS",
  "BTERMSor": "BTERMS=e",
  "BTERMSthen": "BTERMS=e",
  "BFACTORopenparen": "BFACTOR=openparen BEXPR closeparen",
  "BFACTORtrue": "BFACTOR=true",
  "BFACTORfalse": "BFACTOR=false",
  "BFACTORnot": "BFACTOR=not BFACTOR",
  "NUMBERplus": "NUMBER=OPS num",
  "NUMBERminus": "NUMBER=OPS num",
  "NUMBERnum": "NUMBER=OPS num",
  "NUMBERopenparen": "NUMBER=OPS num",
  "OPSplus": "OPS=OP",
  "OPSminus": "OPS=OP",
  "OPSnum": "OPS=e",
}